services:
  # ---------- інфраструктура ----------
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: unless-stopped
    networks:
      - review-net

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=${ANALYSIS_DB_NAME}
      - POSTGRES_USER=${ANALYSIS_DB_USER}
      - POSTGRES_PASSWORD=${ANALYSIS_DB_PASS}
    volumes: [ "postgres-data:/var/lib/postgresql/data" ]
    ports: [ "5432:5432" ]
    restart: unless-stopped
    networks:
      - review-net

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${SQL_SERVER_PASSWORD}
      - MSSQL_PID=Express
    ports: [ "1433:1433" ]
    volumes: [ "mssql-data:/var/opt/mssql" ]
    restart: unless-stopped
    networks:
      - review-net

  mongo:
    image: mongo:7-jammy
    container_name: mongo
    ports: [ "27017:27017" ]
    volumes: [ "mongo-data:/data/db" ]
    restart: unless-stopped
    networks:
      - review-net

  redis:
    image: redis:7-alpine
    container_name: redis
    ports: [ "6379:6379" ]
    restart: unless-stopped
    networks:
      - review-net

  # ---------- мікросервіси ----------
  analysisservice:
    build:
      context: .
      dockerfile: AnalysisService/AnalysisService.API/Dockerfile
    env_file: .env
    environment:
      - ConnectionStrings__RabbitMQ=${RABBITMQ_URI}
      - ConnectionStrings__Postgres=${ANALYSIS_DB_URI}
      - OpenAI__BaseUrl=https://api.openai.com
      - OpenAI__ApiKey=${OPENAI_API_KEY}
      - OpenAI__Model=${OPENAI_MODEL}
    depends_on: [ rabbitmq, postgres ]
    restart: unless-stopped
    networks:
      - review-net

  requestsservice:
    build:
      context: .
      dockerfile: analysistrackerservice/AnalysisTrackerService.API/Dockerfile
    env_file: .env
    environment:
      - ConnectionStrings__RabbitMQ=${RABBITMQ_URI}
      - ConnectionStrings__SqlServer=${REQUESTS_SQL_URI}
      - Scrapers__rozetka__BaseUrl=http://scraper-api:8080
      - Scrapers__foxtrot__BaseUrl=http://scraper-api:8080
      - Scrapers__allo__BaseUrl=http://scraper-api:8080
    depends_on: [ sqlserver ]
    restart: unless-stopped
    networks:
      - review-net

  scraper-api:
    build:
      context: .
      dockerfile: ReviewsScraper/ReviewsScraper.API/Dockerfile
    env_file: .env
    environment:
      - ConnectionStrings__RabbitMQ=${RABBITMQ_URI}
      - ConnectionStrings__SqlServer=${REVIEWS_SQL_URI}
      - RozetkaApi__BaseUrl=${ROZETKA_API_BASE_URL}
      - FoxtrotApi__BaseUrl=${FOXTROT_API_BASE_URL}
      - AlloApi__BaseUrl=${ALLO_API_BASE_URL}
      - Cache__Redis=${REDIS_URI}
    depends_on: [ sqlserver, rabbitmq, redis ]
    restart: unless-stopped
    networks:
      - review-net

  tableauexporter:
    build:
      context: .
      dockerfile: TableauExporterService/TableauExporterService.API/Dockerfile
    env_file: .env
    environment:
      - ConnectionStrings__RabbitMQ=${RABBITMQ_URI}
      - ConnectionStrings__Mongo=${MONGO_URI}
      - Tableau__PATName=${TABLEAU_PAT_NAME}
      - Tableau__PATSecret=${TABLEAU_PAT_SECRET}
      - Tableau__BaseUrl=${TABLEAU_BASE_URL}
      - Tableau__SiteId=${TABLEAU_SITE_ID}
      - Tableau__ProjectId=${TABLEAU_PROJECT_ID}
      - Tableau__TwbTemplatePath=./Templates/Template.twb
    depends_on: [ rabbitmq, mongo ]
    restart: unless-stopped
    networks:
      - review-net

  webapp:
    build:
      context: .
      dockerfile: WebApp/Dockerfile
    env_file: .env
    environment:
      - ApiGateway__BaseUrl=${API_GATEWAY_BASE_URL}
      - Tableau__DashboardUrl=${TABLEAU_DASHBOARD_URL}
      - RequestTracker__BaseUrl=http://requestsservice:8080
    depends_on: [ apigateway ]
    restart: unless-stopped
    networks:
      - review-net

  apigateway:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    env_file: .env
    environment:
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - Jwt__Key=${JWT_SECRET}
      - RateLimiting__PermitLimit=${RATE_LIMIT_PERMIT}
      - RateLimiting__WindowSeconds=${RATE_LIMIT_WINDOW}
    ports:
      - "80:8080"
    depends_on:
      - scraper-api
      - requestsservice
      - analysisservice
      - tableauexporter
    restart: unless-stopped
    networks:
      - review-net

volumes:
  postgres-data:
  mssql-data:
  mongo-data:


networks:
  review-net:
    driver: bridge